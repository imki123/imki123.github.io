/* eslint-disable jsx-a11y/accessible-emoji */
import React, { useEffect, useState } from 'react'
import './Post.scss'
import { Link } from 'react-router-dom'
import { useQuill } from 'react-quilljs'
import Comment from './Comment'
import { AppContext } from '../App'
import RefreshIcon from '@material-ui/icons/Refresh'
import Axios from 'axios'
import Meta from './Meta'
import Recents from './Recents'
import CommentLists from './CommentLists'
import Emoji from './Emoji'
import { resizeTextarea } from '../utils/util'
import { Button } from '@material-ui/core'
import AccountCircleIcon from '@material-ui/icons/AccountCircle'

function Post({ match, location, history }) {
  const store = React.useContext(AppContext)
  let { postId } = match.params
  const [post, setPost] = useState(false)
  const [postBody, setPostBody] = useState()
  const [comments, setComments] = useState([])
  const [commentCnt, setCommentCnt] = useState(3)

  const [recents, setRecents] = useState([])
  const [popular, setPopular] = useState([])
  const [recentComments, setRecentComments] = useState([])

  const modules = { syntax: true }
  const formats = ['bold', 'italic', 'underline', 'strike', 'code-block', 'blockquote', 'size', 'header', 'align', 'color', 'background', 'indent', 'list', 'link', 'image', 'video', 'clean']
  const { quill, quillRef } = useQuill({ modules, formats, readOnly: true })

  useEffect(() => {
    setPost(false)
    setPostBody(false)
    //Ìè¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
    let id = 1
    if (postId) id = postId
    let url = process.env.REACT_APP_URL + '/posts/' + id
    //url = process.env.REACT_APP_LOCAL_URL + '/posts/' + id
    Axios.get(url, {
      withCredentials: true,
    })
      .then((res) => {
        setComments(res.data.comments)
        setPost(res.data)
      })
      .catch((e) => {
        alert('Ï∞æÏúºÏãúÎäî ÌéòÏù¥ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§.\n' + e)
        history.go(-1)
      }) //Ïã§Ìå®

    //Ìè¨Ïä§Ìä∏Î∞îÎîî Í∞ÄÏ†∏Ïò§Í∏∞
    url = process.env.REACT_APP_URL + '/posts/postBody/' + id
    //url = process.env.REACT_APP_LOCAL_URL + '/posts/postBody/' + id
    Axios.get(url)
      .then((res) => {
        setPostBody(res.data.body)

        if (location.hash) {
          //hashÍ∞Ä ÏûàÏúºÎ©¥ Ìï¥Îãπ ÏóòÎ¶¨Î®ºÌä∏Î°ú Ïä§ÌÅ¨Î°§
          setTimeout(() => {
            const elem = document.querySelector(location.hash)
            document.body.scrollTop = elem.offsetTop
          }, 10)
        }
      })
      .catch((e) => {
        console.log(e)
      }) //Ïã§Ìå®

    //ÌôàÏùºÍ≤ΩÏö∞ recents, popular, recentComments Í∞ÄÏ†∏Ïò¥
    if (location.pathname === '/') {
      url = process.env.REACT_APP_URL + '/posts/popular'
      //url = process.env.REACT_APP_LOCAL_URL + '/posts/popular'
      Axios.get(url).then((res) => {
        setPopular(res.data)
      })

      url = process.env.REACT_APP_URL + '/posts/recents'
      //url = process.env.REACT_APP_LOCAL_URL + '/posts/recents'
      Axios.get(url).then((res) => {
        setRecents(res.data)
      })

      url = process.env.REACT_APP_URL + '/comments/recent'
      //url = process.env.REACT_APP_LOCAL_URL + '/comments/recent'
      Axios.get(url).then((res) => {
        setRecentComments(res.data)
      })
    }
  }, [location, postId, history])

  //Ìè¨Ïä§Ìä∏ Î∞îÎîîÍ∞Ä Ï§ÄÎπÑÎêòÎ©¥ quillÏóê Ìè¨Ïä§Ìä∏ Î∞îÎîîÎ•º Í∑∏Î¶¨Í≥†
  //Ìè¨Ïä§Ìä∏ Î∞îÎîîÍ∞Ä ÏóÜÏúºÎ©¥ Ìè¨Ïä§Ìä∏Í∞Ä ÏûàÏúºÎ©¥ quillÏóê Ìè¨Ïä§Ìä∏ ÌÖçÏä§Ìä∏Î•º Í∑∏Î¶¨Í∏∞.
  useEffect(() => {
    if (quill) {
      if (postBody) {
        quill.setContents(postBody)
      } else if (post) {
        quill.setText(post.text)
      }
    }
  }, [quill, postBody, post])

  //Ìè¨Ïä§Ìä∏Í∞Ä Ï§ÄÎπÑÎêòÎ©¥ ÌôîÎ©¥ Î≥¥Ïù¥Í∏∞
  useEffect(() => {
    store.setReady(false)
    if (post) {
      store.setReady(true)

      //ÌÉúÍ∑∏ Ï∞æÏïÑÏÑú activeListManual Ï†ÅÏö©
      let activeTags
      if (post.tags[1]) {
        activeTags = document.querySelectorAll(`a[href="/tags/${post.tags[1]}"]`)
      } else if (post.tags[0]) {
        activeTags = document.querySelectorAll(`a[href="/tags/${post.tags[0]}"]`)
      }
      if (activeTags) {
        for (let i of activeTags) {
          i.classList.add('activeListManual')
        }
      }
    }
  })

  const deletePost = (e) => {
    if (window.confirm('Í∏Ä ÏÇ≠Ï†ú Ïãú Î≥µÍµ¨Í∞Ä Î∂àÍ∞ÄÌï©ÎãàÎã§. Ìï¥Îãπ Í∏ÄÏùÑ Ï†ïÎßêÎ°ú ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      const postId = e.target.id
      let url = process.env.REACT_APP_URL + '/posts/' + postId
      //url = process.env.REACT_APP_LOCAL_URL+'/posts/'+postId

      Axios.delete(url, {
        //Í∏Ä ÏÇ≠Ï†ú
        withCredentials: true, //CORS
      })
        .then((res) => {
          console.log(`${postId}Î≤à Í∏Ä ÏÇ≠Ï†ú ÏÑ±Í≥µ`)
          history.go(-1)
        })
        .catch((e) => alert(e)) //Ïã§Ìå®
    }
  }

  const postComment = (e) => {
    const comment = document.querySelector(`.commentContent textarea`) //ÎåìÍ∏Ä ÌÖçÏä§Ìä∏
    if (comment && comment.value !== '' && window.confirm('ÎåìÍ∏ÄÏùÑ ÏûëÏÑ±ÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      let url = process.env.REACT_APP_URL + '/comments/' + post.postId
      //url = process.env.REACT_APP_LOCAL_URL+'/comments/'+post.postId

      Axios.patch(url, {
        //ÎåìÍ∏Ä ÏûëÏÑ±
        withCredentials: true, //CORS
        data: {
          username: store.login.username,
          content: comment.value,
        },
      })
        .then((res) => {
          console.log(`${post.postId} ÎåìÍ∏Ä Ï∂îÍ∞Ä ÏÑ±Í≥µ`)
          refreshComment(null, setCommentCnt(res.data.comments.length)) //Ìè¨Ïä§Ìä∏ Îã§Ïãú Î∂àÎü¨Ïò§Í≥† ÎåìÍ∏Ä ÎÅùÍπåÏßÄ Î≥¥Ïù¥Í∏∞
          comment.value = ''
        })
        .catch((e) => alert(e)) //Ïã§Ìå®
    }
  }

  const refreshComment = (e, func) => {
    //ÎåìÍ∏Ä Í∞ÄÏ†∏Ïò§Í∏∞
    let url = process.env.REACT_APP_URL + '/comments/' + post.postId
    //url = process.env.REACT_APP_LOCAL_URL+'/comments/'+post.postId

    let svg //refresh ÏïÑÏù¥ÏΩò
    if (e && e.target) svg = e.target.querySelector('svg')
    if (svg) svg.classList.add('refreshing') //refresh Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë

    Axios.get(url, {
      withCredentials: true,
    }) //ÎåìÍ∏Ä ÏÉàÎ°úÍ≥†ÏπòÍ∏∞
      .then((res) => {
        console.log(`${post.postId} ÎåìÍ∏Ä ÏÉàÎ°úÍ≥†Ïπ®`)
        setComments(res.data) //ÎåìÍ∏Ä Ï†ÄÏû•
        if (svg) svg.classList.remove('refreshing') //refresh Ïï†ÎãàÎ©îÏù¥ÏÖò ÎÅù

        if (func) func() //ÌååÎùºÎØ∏ÌÑ∞Ïóê Ìï®ÏàòÍ∞Ä ÏûàÏúºÎ©¥ Ìï®Ïàò Ïã§Ìñâ
      })
      .catch((e) => {
        //Ïã§Ìå®
        if (svg) svg.classList.remove('refreshing') //refresh Ïï†ÎãàÎ©îÏù¥ÏÖò ÎÅù
        console.log(e)
      })
  }

  //ÎåìÍ∏Ä 10Í∞ú ÎçîÎ≥¥Í∏∞
  const more = (e) => {
    setCommentCnt(commentCnt + 10)
  }

  //ÎåìÍ∏Ä ÎçîÎ≥¥Í∏∞, ÎåìÍ∏Ä ÏÉàÎ°úÍ≥†Ïπ® ÌïòÎ©¥ Î¶¨ÏÇ¨Ïù¥Ï¶à
  useEffect(() => {
    resizeTextarea()
  }, [commentCnt, store, comments])

  return (
    <>
      <div className="post">
        {location.pathname === '/' ? (
          <Meta
            data={{
              title: 'ÏûÑÍ∏∞Ïùò ÏΩîÎî© Î∏îÎ°úÍ∑∏',
              description: post.text ? post.text.replace(/\n/g, ' ') : '',
              canonical: '',
            }}
          />
        ) : (
          <Meta data={{ title: post.title, description: post.text ? post.text.replace(/\n/g, ' ') : '', canonical: `posts/${post.postId}` }} />
        )}
        {/* ÌÉúÍ∑∏ */}
        <div className="nav">
          <div>
            <span>Tag : </span>
            {post.tags &&
              post.tags.map((i, idx) =>
                idx === 0 ? (
                  <span key={i}>
                    <Link to={i === 'home' ? '/' : `/tags/${i}`}>{i}</Link>
                  </span>
                ) : (
                  <span key={i}>
                    , <Link to={`/tags/${i}`}>{i}</Link>
                  </span>
                ),
              )}
          </div>
          <div>
            {/* Ï°∞ÌöåÏàò */}
            {
              /* post.postId !== 1 &&  */ <span>
                Ï°∞ÌöåÏàò: {post.views ? post.views + 1 : 1}
                {', '}
              </span>
            }
            {/* Í≤åÏãúÏùºÏûê */}
            {post && post.publishedDate.substring(0, 16).replace('T', ' ')}
          </div>
        </div>

        {/* Í∏Ä ÏàòÏ†ï ÏÇ≠Ï†ú Î≤ÑÌäº */}
        {store.login && store.login.username === 'imki123' && (
          <div className="postButtons">
            <Link to={`/quill/${post.postId}`} className="hover no-drag">
              ÏàòÏ†ï
            </Link>
            &nbsp;
            <button onClick={deletePost} id={post.postId} style={{ background: 'red' }}>
              ÏÇ≠Ï†ú
            </button>
          </div>
        )}

        <h2 className="postTitle">{post.title}</h2>
        <div className="postContent">
          {/* Î≥∏Î¨∏ */}
          <div id="editor">
            <div ref={quillRef} />
          </div>
          <div className="hiddenText">{post.text}</div>

          {/* Í∏Ä ÏàòÏ†ï ÏÇ≠Ï†ú Î≤ÑÌäº */}
          {store.login && store.login.username === 'imki123' && (
            <div className="postButtons">
              <Link to={`/quill/${post.postId}`} className="hover no-drag">
                ÏàòÏ†ï
              </Link>
              &nbsp;
              <button onClick={deletePost} id={post.postId} style={{ background: 'red' }}>
                ÏÇ≠Ï†ú
              </button>
            </div>
          )}
        </div>

        {/* ÎåìÍ∏Ä ÏûëÏÑ±*/}
        {location.pathname !== '/' && (
          <>
            <div className="EmojiDiv">
              <Emoji emojis={'üòÑ,ü§£,ü•∞,üòç,üòù,üò≠,üëç,üêï,üêà,‚òÄ,üåô,‚≠ê,‚òÅ,üåß,üíß,‚ô•,‚ù§,üíï'} />
            </div>
            <div className="writeComment">
              <div className="commentProfile">
                {!store.login ? (
                  <AccountCircleIcon />
                ) : (
                  <img
                    alt="PROFILE"
                    src={store.login.imageUrl + ''}
                    onError={(e) => {
                      e.target.src = process.env.PUBLIC_URL + '/images/dog' + (Math.floor(Math.random() * (3 - 1 + 1)) + 1) + '.png'
                    }}
                  />
                )}
              </div>
              <div className="commentContent">
                {store.login ? (
                  <span className="commentUsername">{store.login.username}</span>
                ) : (
                  <Button
                    variant="contained"
                    color="primary"
                    className="loginButton"
                    onClick={() => {
                      history.push('/login')
                    }}
                  >
                    Î°úÍ∑∏Ïù∏
                  </Button>
                )}
                {store.login ? <textarea onChange={resizeTextarea} placeholder=" ÎåìÍ∏ÄÏùÑ ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî üòÑ" /> : <textarea readOnly placeholder=" Î°úÍ∑∏Ïù∏ ÌõÑÏóê ÎåìÍ∏ÄÏùÑ ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî üòÑ" />}
              </div>
            </div>
            <div className="commentButtons">
              {store.login && (
                <button className="commentButton" onClick={postComment}>
                  ÎåìÍ∏ÄÏûëÏÑ±
                </button>
              )}
            </div>
          </>
        )}

        {/* ÎåìÍ∏Ä Î™©Î°ù */}
        {comments && comments.length > 0 && (
          <div id="comments">
            <div className="commentTitle">
              <div className="commentCnt">ÎåìÍ∏Ä {comments.length}Í∞ú</div>
              <span className="commentRefresh" onClick={refreshComment}>
                ÎåìÍ∏Ä ÏÉàÎ°úÍ≥†Ïπ® <RefreshIcon />
              </span>
            </div>
            {comments.map((i, idx) => idx < commentCnt && <Comment post={post} comment={i} key={i.commentId} refreshComment={refreshComment} />)}
            {comments.length > commentCnt && (
              <div className="more">
                <span className="moreButton" onClick={more}>
                  ÎåìÍ∏Ä ÎçîÎ≥¥Í∏∞
                </span>
              </div>
            )}
          </div>
        )}
      </div>
      {location.pathname === '/' && (
        <div className="homeLists">
          <Recents title="ÏµúÏã†Í∏Ä" list={recents} />
          <Recents title="Ïù∏Í∏∞Í∏Ä" list={popular} />
          <CommentLists list={recentComments} />
        </div>
      )}
    </>
  )
}
export default React.memo(Post)
